#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('beasts-chat-server:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3003');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const io = require('socket.io').listen(server);

io.on('connection', function(socket){
  console.log('a user connected');

  let name = "";
  socket.on('username', (username)=> {
    socket.username = username;
    name = username;
    io.emit('is_online', 'ðŸ”˜ <i>' + socket.username + ' join the chat..</i>');
  });

  socket.on('disconnect', ()=>{
    console.log('user disconnected');
    io.emit('user-disconnect', name + ' has disconnected from the chat')
  });

  socket.on('chat-message', (msg)=>{
    io.emit('display_message', 'ðŸ”˜ <i>' + socket.username + ": " + msg + '</i>');
  });

});


/**
 * Listen on provided port, on all network interfaces.
 */


server.listen(port, function(){
  console.log('listening on *:3003');
});

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
